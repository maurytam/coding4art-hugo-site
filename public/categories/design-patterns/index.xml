<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design patterns on My New Hugo Site</title>
    <link>https://example.org/categories/design-patterns/</link>
    <description>Recent content in Design patterns on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Jul 2010 20:45:00 +0000</lastBuildDate><atom:link href="https://example.org/categories/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Link utili della settimana #8</title>
      <link>https://example.org/archive/2010/07/16/link-utili-della-settimana-8.aspx</link>
      <pubDate>Fri, 16 Jul 2010 20:45:00 +0000</pubDate>
      
      <guid>https://example.org/archive/2010/07/16/link-utili-della-settimana-8.aspx</guid>
      <description>– Super cool MSBuild Debugging in Visual Studio IDE
Questa è una feature eccezionale non ufficialmente supportata. Seguendo il link è possibile scoprire i passi necessari per abilitarla in Visual Studio 2010.
– Tool di migrazione VB6 –&amp;gt; VB .NET / C# gratuito
Considerato che è gratuito e che promette bene vale sicuramente la pena provarlo.
– Visual Studio 2010 Dark background
Add-in per VS 2010 per impostare dei temi personalizzati circa i colori, tra cui un fantastico Dark</description>
    </item>
    
    <item>
      <title>Uso delle parentesi graffe</title>
      <link>https://example.org/archive/2010/07/13/uso-delle-parentesi-graffe.aspx</link>
      <pubDate>Tue, 13 Jul 2010 15:15:00 +0000</pubDate>
      
      <guid>https://example.org/archive/2010/07/13/uso-delle-parentesi-graffe.aspx</guid>
      <description>Sono sempre stato piuttosto “maniacale” nella scrittura di codice, circa il rispetto delle guidelines e circa uno stile di codifica che aiuti a migliorare la leggibilità dello stesso, e la sua manutenibilità.
Ho sempre sostenuto che il pezzo di codice scritto stilisticamente bene è quello che si “autodocumenta” semplicemente solo leggendolo.
La leggibilità aumenta, a mio parere, anche con opportuni accorgimenti o tecniche, non sempre utilizzati da tutti, anzi spesso ci sono pareri discordanti sull’effettiva utilità di alcune modalità di scrittura.</description>
    </item>
    
    <item>
      <title>Software Architecture #1 Il design pattern Decorator</title>
      <link>https://example.org/archive/2010/04/12/software-architecture-1-il-design-pattern-decorator.aspx</link>
      <pubDate>Mon, 12 Apr 2010 04:40:00 +0000</pubDate>
      
      <guid>https://example.org/archive/2010/04/12/software-architecture-1-il-design-pattern-decorator.aspx</guid>
      <description>Il pattern “Decorator” appartiene alla famiglia dei design pattern della GoF (Gang of Four), ed è classificato come pattern strutturale. E’ un pattern molto semplice da usare, che permette di aggiungere dei comportamenti personalizzati, e quindi delle responsabilità, ad una certa classe senza per questo utilizzare tecniche di subclassing.
Immaginiamo di avere un componente per il log delle informazioni. Esso invoca un servizio di logging e rispetta questo contratto definito mediante una semplice interfaccia:</description>
    </item>
    
  </channel>
</rss>
